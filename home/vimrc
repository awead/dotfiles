" -----------------------------------------------------------------------------
"
" VIM Configuration
"
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" Load plugins using pathogen (see vim/install.sh for specifics)
" -----------------------------------------------------------------------------
execute pathogen#infect()

" -----------------------------------------------------------------------------
" Basic Settings
" -----------------------------------------------------------------------------

set autoindent
set autowrite     " Automatically :write before running commands
set backspace=2   " Backspace deletes like most programs in insert mode
set colorcolumn=120
set encoding=utf-8
set expandtab
set history=50
set hlsearch
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set modelines=0   " Disable modelines as a security precaution
set nobackup
set nomodeline
set noswapfile
set nowritebackup
set nu
set ruler
set shiftwidth=2
set showcmd       " display incomplete commands
set smartindent
set smarttab
set softtabstop=0
set spell spelllang=en_us
set splitbelow
set splitright
set tabstop=8
set textwidth=120

" Customized status line
set statusline=  
set statusline+=%n\              " buffer number  
set statusline+=%f\              " filename   
set statusline+=%h%m%r%w         " status flags  
set statusline+=%=               " right align remainder  
set statusline+=0x%-8B           " character value  
set statusline+=%-14(%l,%c%V%)   " line, character  
set statusline+=%<%P             " file position 

" Enable syntax highlighting
syntax on

" Vim's internal grep commands use `rg`
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" -----------------------------------------------------------------------------
" Custom Functions 
" -----------------------------------------------------------------------------

" Return string of bundle paths (if present)
function! BundlePaths() abort
  if isdirectory('.bundle') == 1
    return system('bundle list --paths')
  else
    return ''
  endif
endfunction

" -----------------------------------------------------------------------------
" Git Integration
"   * ensure commit messages are no longer than 72 characters
"   * enable spell checking for commit messages
" -----------------------------------------------------------------------------

autocmd BufRead,BufNewFile setlocal textwidth=72
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType gitcommit setlocal spell
 
" -----------------------------------------------------------------------------
" CTags
"
" Adds local tags and a "tags" directory from every included gem via bundler.
" Previously, this was done via an autocmd FileType ruby, but it was behaving
" strangely. With this implementation, it assumes we have a .bundle directory
" and adds all the directories at runtime. It's possible this will behave
" strangely when switching to different directories in the same sessions, but
" I usually don't do that.
"
" Note: Requires a git post-commit hook
"       (see home/git-templates/hooks/post-commit)
" -----------------------------------------------------------------------------

function! BundleTagPaths() abort
  if isdirectory('.bundle') == 1
    return map(split(system('bundle list --paths')), 'v:val."/tags"')
  else
    return []
  endif
endfunction

let &tags= pathogen#legacyjoin(pathogen#uniq(['tags', '.tags'] + BundleTagPaths()))

" -----------------------------------------------------------------------------
" Colors
"   * use only underlining for misspelled words
"   * set our color scheme
"
" Note: Order is important. Setting spellcheck colors must come first.
" -----------------------------------------------------------------------------

augroup my_spellcheck_colors
  autocmd!
  autocmd ColorScheme *
        \ highlight SpellBad
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
  autocmd ColorScheme *
        \ highlight SpellCap
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
  autocmd ColorScheme *
        \ highlight SpellLocal
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
  autocmd ColorScheme *
        \ highlight SpellRare
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
augroup END

colorscheme zellner

" -----------------------------------------------------------------------------
" Colemak Key Bindings
" -----------------------------------------------------------------------------

" Keep the home keys in the same place
noremap i l
noremap e k
noremap n j

" Swap i for m
" This seems to be a reasonable change as "m" doesn't seem to be used much, and
" it mnemonically goes with "middle" so "cmw" is "change from middle of word".
" The insert function also implies that you're putting something in the midst
" of something else.
noremap m i


" -----------------------------------------------------------------------------
" Shortcuts
" -----------------------------------------------------------------------------

" Use a space as the leader prefix to create local versions for commands
let mapleader = " "

" Boutique escaping
"imap <silent> df <ESC>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Buffers
nnoremap <leader>1 :b1<CR>
nnoremap <leader>2 :b2<CR>
nnoremap <leader>3 :b3<CR>
nnoremap <leader>4 :b4<CR>
nnoremap <leader>5 :b5<CR>
nnoremap <leader>6 :b6<CR>
nnoremap <leader>7 :b7<CR>
nnoremap <leader>8 :b8<CR>
nnoremap <leader>9 :b9<CR>
nnoremap <leader>j :bn<CR>
nnoremap <leader>k :bp<CR>

" Splits
" Move around splits like you do normal navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Maps arrow keys to resize windows
nnoremap <leader><Left> :vertical resize -5<CR>
nnoremap <leader><Right> :vertical resize +5<CR>
nnoremap <leader><Up> :resize -5<CR>
nnoremap <leader><Down> :resize +5<CR>

" -----------------------------------------------------------------------------
" Custom commands
" -----------------------------------------------------------------------------

" Saves and (re)generates the Yard docs
command -nargs=* Yard :w !bundle exec yard
nnoremap <leader>y :Yard<CR>

" Saves and (re)generates OpenAPI docs
command -nargs=* Api :w !bundle exec yarn build-docs
nnoremap <leader>o :Api<CR>

" View coverage report
function Coverage()
  if isdirectory('coverage') == 1
    call system('open coverage/index.html')
  else
    echo 'No coverage report found'
  endif
endfunction
command -nargs=* Coverage :call Coverage()

" -----------------------------------------------------------------------------
"
" Plugin Settings
"
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" FZF: fuzzy searching
" -----------------------------------------------------------------------------

nnoremap <C-p> :<C-u>Files<CR>
nnoremap <leader>b :<C-u>Buffers<CR>
nnoremap <leader>t :<C-u>Tags<CR>
nnoremap <leader>T :<C-u>BTags<CR>

" Bg (bundle grep) command that uses rg to search the current directory as well
" as all paths to bundled gems. See bgrep under zsh/functions.zsh

function! BgrepFzf(query, fullscreen)
  let bundle_paths = substitute(BundlePaths(), '\n', ' ', 'g')
  let command_fmt = "rg --column --line-number --no-heading --color=always --smart-case -- %s . %s"
  let bgrep_command = printf(command_fmt, shellescape(a:query), bundle_paths)
  let spec = {'options': '--delimiter : --nth 4..'}

  call fzf#vim#grep(bgrep_command, 1, fzf#vim#with_preview(spec, 'up', 'ctrl-/'), a:fullscreen)
endfunction

command! -nargs=* -bang Bg call BgrepFzf(<q-args>, <bang>0)

" Search using the word under the cursor 
nnoremap <leader>f :<C-u>Bg <C-r><C-w><CR>

" -----------------------------------------------------------------------------
" Lightline
" -----------------------------------------------------------------------------

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }


" -----------------------------------------------------------------------------
" NerdTree: tree navigation of the current directory
" -----------------------------------------------------------------------------

"nnoremap <leader>n :NERDTreeFocus<CR>
"nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" -----------------------------------------------------------------------------
" RI: Search Ruby documentation via ri
" -----------------------------------------------------------------------------

let g:ri_no_mappings=1

command -nargs=* Ri :call ri#OpenSearchPrompt(0)<CR>
command -nargs=* RiV :call ri#OpenSearchPrompt(1)<CR>

" -----------------------------------------------------------------------------
" Vimux: allows tests to execute in another tmux pane
" -----------------------------------------------------------------------------

let g:VimuxHeight = "33"

nnoremap <Leader>vp :VimuxPromptCommand<CR>
nnoremap <Leader>vl :VimuxRunLastCommand<CR>
nnoremap <Leader>vi :VimuxInspectRunner<CR>
nnoremap <Leader>vq :VimuxCloseRunner<CR>
nnoremap <Leader>vx :VimuxInterruptRunner<CR>
nnoremap <Leader>vz :call VimuxZoomRunner()<CR>
nnoremap <Leader>a :call VimuxRunCommand("clear; bin/rspec ")<CR>
 
" -----------------------------------------------------------------------------
" Vim-Gitgutter
"   * disabled by default
"   * use local shortcuts to selectively show diffs
" -----------------------------------------------------------------------------

let g:gitgutter_enabled = 0
let g:gitgutter_highlight_lines = 0
nnoremap <Leader>gg :GitGutterToggle<CR>
nnoremap <Leader>gh :GitGutterLineHighlightsToggle<CR>
highlight SignColumn guibg=#000000 ctermbg=Black

" -----------------------------------------------------------------------------
" Vim-Rails
"   * custom projections for Rails components
" -----------------------------------------------------------------------------

let g:rails_projections = {
    \ "app/components/*.rb": {
    \   "type": "component",
    \   "alternate": [
    \     "app/components/{}.html.erb",
    \     "spec/components/{}_spec.rb"
    \   ]
    \ },
    \ "app/components/*.html.erb": {
    \   "type": "component",
    \   "alternate": [
    \     "spec/components/{}_spec.rb",
    \     "app/components/{}.rb"
    \   ]
    \ },
    \ "spec/components/*_spec.rb": {
    \   "type": "component",
    \   "alternate": [
    \     "app/components/{}.rb",
    \     "app/components/{}.html.erb"
    \   ]
    \ }}

" -----------------------------------------------------------------------------
" Vim-Test: runs tests in vim, with tmux where applicable
" -----------------------------------------------------------------------------

nnoremap <Leader>gt :TestVisit<CR>
nnoremap <Leader>d :let test#ruby#rspec#executable = 'docker-compose exec listener bundle exec rspec'<CR>

" -----------------------------------------------------------------------------
" Vim-Vroom: runs Ruby tests via vimux
" -----------------------------------------------------------------------------

let g:vroom_use_vimux = 1

nnoremap <Leader>r :call vroom#RunTestFile()<CR>
nnoremap <Leader>R :call vroom#RunNearestTest()<CR>
nnoremap <Leader>l :call vroom#RunLastTest()<CR>
