set encoding=utf-8

set autowrite     " Automatically :write before running commands
set backspace=2   " Backspace deletes like most programs in insert mode
set history=50
set hlsearch
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set statusline=  
set statusline+=%n\                     " buffer number  
set statusline+=%f\                          " filename   
set statusline+=%h%m%r%w                     " status flags  
set statusline+=%=                           " right align remainder  
set statusline+=0x%-8B                       " character value  
set statusline+=%-14(%l,%c%V%)               " line, character  
set statusline+=%<%P                         " file position 
set modelines=0   " Disable modelines as a security precaution
set nobackup
set nomodeline
set noswapfile
set nowritebackup
set nu
set ruler
set showcmd       " display incomplete commands
set tags+=.tags
set textwidth=120
set colorcolumn=120
set tabstop=8
set softtabstop=0
set expandtab
set shiftwidth=2
set autoindent
set smartindent
set smarttab
set spell spelllang=en_us
autocmd FileType gitcommit setlocal spell

" Color scheme
augroup my_spellcheck_colors
  autocmd!
  autocmd ColorScheme *
        \ highlight SpellBad
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
  autocmd ColorScheme *
        \ highlight SpellCap
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
  autocmd ColorScheme *
        \ highlight SpellLocal
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
  autocmd ColorScheme *
        \ highlight SpellRare
        \   cterm=Underline
        \   ctermfg=NONE
        \   ctermbg=NONE
        \   term=Reverse
        \   gui=Undercurl
        \   guisp=Red
augroup END
colorscheme zellner

" Enable syntax highlighting
syntax on

" Leader prefix to create local versions for commands
let mapleader = " "

" Set text width for well-formatted commit messages
au BufRead,BufNewFile setlocal textwidth=72
au FileType gitcommit setlocal textwidth=72

" Tree Navigation
let g:netrw_banner = 0
let g:netrw_liststyle = 3

"
" Shortcuts
"

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Move around splits like you do normal navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Vim's internal grep commands use `rg`
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" Buffers
nnoremap <leader>1 :b1<CR>
nnoremap <leader>2 :b2<CR>
nnoremap <leader>3 :b3<CR>
nnoremap <leader>4 :b4<CR>
nnoremap <leader>5 :b5<CR>
nnoremap <leader>6 :b6<CR>
nnoremap <leader>7 :b7<CR>
nnoremap <leader>8 :b8<CR>
nnoremap <leader>9 :b9<CR>
nnoremap <leader>j :bn<CR>
nnoremap <leader>k :bp<CR>

" Custom commands

" Saves and (re)generates the Yard docs
command -nargs=* Yard :w !bundle exec yard
nnoremap <leader>y :Yard<CR>

" Saves and (re)generates OpenAPI docs
command -nargs=* Api :w !bundle exec yarn build-docs
nnoremap <leader>o :Api<CR>

"
" Vim plugins with Minpac
"

" Initialize the package manager
packadd minpac
call minpac#init()

" Create some commands to more easily use minpac
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

" FZF plugin for fuzzy searching
" * sets up the local fzf command
" * installs the plugin
" * activate with Ctrl-P
set rtp+=/usr/local/opt/fzf
call minpac#add('junegunn/fzf.vim')
nnoremap <C-p> :<C-u>FZF<CR>

call minpac#add('benmills/vimux') " allows tests to execute in another tmux pane
let g:VimuxHeight = "33"

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>
 
" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>
 
" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>

" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>vz :call VimuxZoomRunner()<CR>

" Vim-Test runs tests in vim, with tmux where applicable
call minpac#add('janko/vim-test')
"let test#ruby#rspec#executable = 'docker-compose exec listener bundle exec rspec'
nnoremap <silent> <Leader>r :TestFile<CR>
nnoremap <silent> <Leader>R :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :call VimuxRunCommand("clear; bin/rspec ")<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>
nnoremap <silent> <Leader>d :let test#ruby#rspec#executable = 'docker-compose exec listener bundle exec rspec'<CR>

call minpac#add('christoomey/vim-tmux-navigator') " Navigate between vim and tmux
call minpac#add('tpope/vim-bundler') " run bundler through vim
call minpac#add('tpope/vim-endwise') " adds 'end' intelligently in ruby
call minpac#add('tpope/vim-eunuch') " integration with unix commands
"call minpac#add('tpope/vim-fugitive') " git integration
call minpac#add('tpope/vim-projectionist') " semantically browse projects
call minpac#add('tpope/vim-rails') " rails integration
call minpac#add('tpope/vim-rake') " rake integration
call minpac#add('tpope/vim-repeat') " makes . command work with fancy cmds
call minpac#add('tpope/vim-sensible') " run bundler through vim
call minpac#add('tpope/vim-surround') " surround stuff with other stuff
call minpac#add('tpope/vim-unimpaired') " pairs of commands that do stuff
call minpac#add('vim-ruby/vim-ruby') " ruby integration
call minpac#add('vim-scripts/tComment') " quickly comment lines
"call minpac#add('w0rp/ale') " asynchronous linting
call minpac#add('machakann/vim-highlightedyank') " Highlight yanked text
call minpac#add('mtth/scratch.vim') " easy  scratch buffer
call minpac#add('pangloss/vim-javascript') " Javascript syntax
call minpac#add('bcicen/vim-jfmt') " JSON formatter
