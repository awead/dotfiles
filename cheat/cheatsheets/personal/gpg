# Create a key

    gpg --gen-key

# Restoring Keys

Gather the keys from the safe

    gpg --import public.asc
    gpg --import secret.asc
    gpg --import sub.asc

Update any expired keys, establish trust levels (typically, ultimate), the remove the secret key (see below)

# Show keys

To list a summary of all keys

    gpg --list-keys

To list your secret key

    gpg --list-secret-keys

To show your public key

    gpg --armor --export

To show the fingerprint for a key

    gpg --fingerprint KEY_ID

# Search for keys

    gpg --search-keys 'user@emailaddress.com'

# To Encrypt a File

    gpg --encrypt --recipient 'user@emailaddress.com' example.txt

# To Decrypt a File

    gpg --output example.txt --decrypt example.txt.gpg

# Export keys

    gpg --armor --export KEY_ID > public.asc
    gpg --armor --export-secret-key KEY_ID > secret.asc

Where KEY_ID is the 8 character GPG key ID or the username.

# Import keys

Retrieve the key files which you previously exported.

    gpg --import public.asc secret.asc

# Revoke a key

Create a revocation certificate.

    gpg --output ~/revoke.asc --gen-revoke KEY_ID

Where KEY_ID is the 8 character GPG key ID.

Keep the certification and if you need to use it to revoke your key, import it:

    gpg --import ~/revoke.asc

You've now revoked your key, but you have let the key servers know about it:

    gpg --send-keys KEY_ID

# Signing and Verifying files

If you're uploading files to launchpad you may also want to include a GPG signature file.

    gpg -ba filename

or if you need to specify a particular key:

    gpg --default-key <key ID> -ba filename

This then produces a file with a .asc extension which can be uploaded.  If you need to set the default key more
permanently then edit the file ~/.gnupg/gpg.conf and set the default-key parameter.

To verify a downloaded file using its signature file.

    gpg --verify filename.asc

# Signing Public Keys

Import the public key or retrieve it from a server.

    gpg --keyserver <keyserver> --recv-keys <Key_ID>

Check its fingerprint against any previously stated value.

    gpg --fingerprint <Key_ID>

Sign the key.

    gpg --sign-key <Key_ID>

Upload the signed key to a server.

    gpg --keyserver <keyserver> --send-key <Key_ID>

# Change the email address associated with a GPG key

    gpg --edit-key <key ID>
    adduid

Enter the new name and email address. You can then list the addresses with:

    list

If you want to delete a previous email address first select it:

    uid <list number>

Then delete it with:

    deluid

To finish type:

    save

Publish the key to a server:

    gpg --send-keys <key ID>

# Creating Subkeys

Subkeys can be useful if you don't wish to have your main GPG key installed on multiple machines. In this way you can
keep your master key safe and have subkeys with expiry periods or which may be separately revoked installed on various
machines. This avoids generating entirely separate keys and so breaking any web of trust which has been established.

    gpg --edit-key <key ID>

At the prompt type:

    addkey

Choose RSA (sign only), 4096 bits and select an expiry period.  Entropy will be gathered.

At the prompt type:

    save

You can also repeat the procedure, but selecting RSA (encrypt only).
To remove the master key, leaving only the subkey/s in place:

    gpg --export-secret-subkeys <subkey ID> > subkeys
    gpg --export <key ID> > pubkeys
    gpg --delete-secret-key <key ID>

Import the keys back.

    gpg --import pubkeys subkeys

Verify the import.

    gpg -K

Should show sec# instead of just sec.

# Updating Expired Keys

This usually applies to subkey and signing keys.  If the secret key has been removed, you'll need to re-import the
secret key in order to update the other keys. Once this is done, be sure to remove the secret key.

It's best to set an expiration date for less than 2 years.

    gpg --edit-key <email or ID>

    key 0
    expire
    save
    key 1
    expire
    save

# Removing the Secret Key

This is ideal in order to keep the secret "super" key completely offline. This key is only needed to create or update
other keys.  Create subkeys and other signing keys for daily use. These can also be different for different systems so
that if one system is compromised, it limits the impact.

The following extracts the necessary keys, deletes them, and then reimports only the subkeys:
  
    export KEY_ID=[who we're looking for]
    gpg -a --export-secret-key $KEY_ID > secret_key.gpg
    gpg -a --export-secret-subkeys $KEY_ID > secret_subkeys.gpg
    gpg --delete-secret-keys $KEY_ID
    gpg --import secret_subkeys.gpg

Verify that the secret_key is save to a separate location, then shred the remains
 
    rm -P secret_key.gpg secret_subkeys.gpg

Once this is complete, you should see "sec#" when you list your secret key:

    gpg --list-secret-keys

    sec#  rsa4096 yyyy-mm-dd [SC] [expires: yyyy-mm-dd]
          XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    uid           [ultimate] Joe Example <joe@gmail.com>
    uid           [ultimate] Joe Example <joe@hotmail.com>
    uid           [ultimate] Joe Example <joe.example@example.com>>
    ssb   rsa4096 yyyy-mm-dd [E] [expires: yyyy-mm-dd]
    ssb   rsa4096 yyyy-mm-dd [S] [expires: yyyy-mm-dd]

# High-quality options for gpg for symmetric (secret key) encryption
  
This is what knowledgable people consider a good set of options for symmetric encryption with gpg to give you a
high-quality result.
  
    gpg \
      --symmetric \
      --cipher-algo aes256 \
      --digest-algo sha512 \
      --cert-digest-algo sha512 \
      --compress-algo none -z 0 \
      --s2k-mode 3 \
      --s2k-digest-algo sha512 \
      --s2k-count 65011712 \
      --force-mdc \
      --pinentry-mode loopback \
      --armor \
      --no-symkey-cache \
      --output somefile.gpg \
      somefile # to encrypt
      
    gpg \
      --decrypt \
      --pinentry-mode loopback \
      --armor \
      --output somefile.gpg \
      somefile # to decrypt
    
