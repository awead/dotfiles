#!/Users/awead/.asdf/shims/ruby

require 'bagit'
require 'optparse'
require 'pathname'
require 'pry'

def options
  @options ||= OpenStruct.new
end

ARGV.options do |opts|
  opts.on("-x", "--run") { |val| options.run = true }

  opts.on_tail("-h", "--help") do
  	puts opts
  	exit
  end

  opts.parse!
end

class BagDeduper
  attr_reader :bag, :options

  def initialize(path:, options:)
    @bag = BagIt::Bag.new(path)
    @options = options
  end

  def call
    set.each do |key, files|
      next if files.count < 2

      files.shift
      files.map do |file|
        if options.run
          remove_file(file)
        else
          puts "delete #{file}"
        end
      end
    end

  end


  private

  def manifest_md5
    @manifest_md5 ||= Pathname.new(bag.manifest_file('md5'))
                        .readlines
                        .map(&:chomp)
  end
  
  def set
    Hash.new.tap do |set|
      manifest_md5.map do |manifest|
        hash, path = manifest.split
        set.has_key?(hash) ? set[hash].push(path) : set[hash] = [path]
      end
    end
  end

  def remove_file(relative_path)
    path = File.join(bag.bag_dir, relative_path)
    raise "Bag file does not exist: #{path}" unless File.exist? path
    FileUtils.rm path
  end
end

bd = BagDeduper.new(path: ARGV[0], options: options)
bd.call



