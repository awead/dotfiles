#!/Users/awead/.asdf/shims/ruby

require 'optparse'
require 'ostruct'
require 'pp'
require 'byebug'
require 'pathname'

def options
  @options ||= OpenStruct.new
end

ARGV.options do |opts|
  opts.on("-t", "--show=", String)                                       { |val| options.show = val }
  opts.on("-s", "--season=", String, "Season number")                    { |val| options.season = val }
  opts.on("-p", "--picture=", String, "Image file")                      { |val| options.picture = val }
  opts.on("-l", "--list=", String, "File with list of episodes")         { |val| options.list = val }
  opts.on("-y", "--year=", String, "Year of release")                    { |val| options.year = val }
  opts.on("-r", "--run", "Rename the files")                             { |val| options.run = true }
  opts.on("-U", "--use-filename", "Use the filename for the title")      { |val| options.use_filename = true }
  opts.on("-I", "--incomplete", "Incomplete season, use episode number") { |val| options.incomplete_season = true }

  opts.on_tail("-h", "--help") do
    puts opts
    exit
  end

  opts.parse!
end

unless (options.show && options.season && options.list) || options.use_filename
  raise ArgumentError,
    "See example: tag-season --season 2 --show House --list episodes.txt, or tag-season -U"
end

class Episode
  attr_reader :file

  def initialize(file:, list_name:, index:, options:)
    @file = file
    @list_name = list_name
    @index = index
    @opts = options
  end

  def use_filename?
    !!@opts.use_filename
  end

  def incomplete_season?
    !!@opts.incomplete_season
  end

  def title
    return list_name unless use_filename?

    parts.drop(2).join(": ")
  end
  
  def number
    return (@index + 1) unless incomplete_season?

    parts[1].split("e").last.to_i
  end

  def season
    return @opts.season unless use_filename?

    parts[1].split("e").first.gsub(/^s/,"").to_i
  end

  def show
    return @opts.show unless use_filename?

    parts.first
  end

  private

    def parts
      @parts ||= file.gsub(/\.m[4v|p4]$/,"").split(" - ")
    end
end

def file_list
  @file_list ||= begin
                   if options.list
                     File.open(options.list).each_line.map(&:chomp)
                   else
                     []
                   end
                 end
end

def episodes
  Dir.glob("*.m*").map.with_index do |file, index|
    Episode.new(
      file: file,
      list_name: file_list[index],
      index: index,
      options: options
    )
  end
end

def base_command(episode)
  "AtomicParsley \"#{episode.file}\" "\
    "--stik \"TV Show\" "\
    "--TVShowName \"#{episode.show}\" "\
    "--TVSeasonNum #{episode.season} "\
    "--TVEpisodeNum #{episode.number} "\
    "--title \"#{episode.title}\" "\
    "--overWrite"
end

def command(episode)
  base = base_command(episode)
  base << " --artwork #{options.picture}" if options.picture
  base << " --year #{options.year}" if options.year
  base
end

episodes.each do |episode|
  if options.run
    system command(episode)
  else
    puts command(episode)
  end
end
